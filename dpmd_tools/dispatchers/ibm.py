import logging

log = logging.getLogger(__name__)


def batch_script_ibm(
    server: str,
    n_nodes: int,
    ident: str,
    run_this: str,
    priority: bool = True,
    hour_length: int = 12,
) -> str:

    s = ""
    if hour_length <= 12:
        cls = "short"
    elif hour_length <= 48:
        cls = "medium"
    else:
        raise ValueError(f"job time {hour_length} is over limit of 48")

    prio = "_priority" if priority else ""

    s += "# File generated by python recompute script\n"
    s += "# @ account_no = martonak-407\n"
    s += "# @ output = output.txt\n"
    s += "# @ error = error.txt\n"
    s += f"# @ cpu_limit = {hour_length}:00:00\n"
    s += "# @ job_type = parallel\n"
    s += f"# @ job_name = {ident}\n"
    s += f"# @ class = {cls}{prio}\n"
    s += f"# @ node = {n_nodes}\n"
    s += "# @ tasks_per_node = 32\n"
    s += "# @ network.MPI = sn_all,not_shared,US\n"
    s += "# @ notification = always\n"
    s += "# @ environment = COPY_ALL\n"
    s += "# @ rset = RSET_MCM_AFFINITY\n"
    s += "# @ mcm_affinity_options = mcm_mem_req mcm_distribute mcm_sni_none\n"
    s += "# @ task_affinity = core(1)\n"
    s += "# @ queue\n\n"

    if run_this == "vasp-scan":
        s += "mpiexec /gpfs/home/dominika/vasp.5.3.2.complex.27.10.14\n"
    elif run_this == "vasp":
        s += "mpiexec /gpfs/home/kohulak/Software/vasp.5.4.4-testing/bin/vasp_std\n"
    elif run_this == "rings":
        s += f"RINGS=/gpfs/home/rynik/Software/rings/bin/rings\n"
        # need to input twice y when auto cutoff determination
        s += f"mpiexec printf 'y\ny\n' | $RINGS input\n"


    return s
